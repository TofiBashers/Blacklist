apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId DEFAULT_APPLICATION_ID
        versionCode DEFAULT_VERSION_CODE
        versionName DEFAULT_VERSION_NAME
        minSdkVersion DEFAULT_MIN_SDK_VERSION
        maxSdkVersion DEFAULT_MAX_SDK_VERSION
        targetSdkVersion DEFAULT_TARGET_SDK_VERSION
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        androidTest.assets.srcDirs +=
                files("$projectDir/schemas".toString())
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

        debug {
            ext.enableCrashlytics = false
        }
    }

    if (!inCIServer()) {
        signingConfigs {
            def props = new Properties()
            release {
                props.load(new FileInputStream(rootProject.file("signing_release.properties")))
                keyAlias props['keyAlias']
                keyPassword props['keyPassword']
                storeFile file(props['storeFile'])
                storePassword props['storePassword']
            }
            debug {
                props.load(new FileInputStream(rootProject.file("signing_debug.properties")))
                keyAlias props['keyAlias']
                keyPassword props['keyPassword']
                storeFile file(props['storeFile'])
                storePassword props['storePassword']
            }
        }

        buildTypes.getByName('release').signingConfig signingConfigs.getByName('release')
        buildTypes.getByName('debug').signingConfig signingConfigs.getByName('debug')
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            //only for use in RxAndroidPlugins.setMainThreadSchedulerHandler
        }
    }
}

kapt {
    correctErrorTypes = true
}

dependencies {

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Support
    implementation "com.android.support:support-v4:${supportLibraryVersion}"
    implementation "com.android.support:appcompat-v7:${supportLibraryVersion}"
    implementation "com.android.support:gridlayout-v7:${supportLibraryVersion}"
    implementation "com.android.support:recyclerview-v7:${supportLibraryVersion}"
    implementation "com.android.support:cardview-v7:${supportLibraryVersion}"
    implementation "com.android.support:multidex:${multidexVersion}"

    // Constraint Layout
    implementation "com.android.support.constraint:constraint-layout:${constraintLayoutVersion}"

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:${lifecycleVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    kapt "android.arch.lifecycle:compiler:${lifecycleVersion}"

    // Room
    implementation "android.arch.persistence.room:runtime:${roomVersion}"
    implementation "android.arch.persistence.room:rxjava2:${roomVersion}"
    kapt "android.arch.persistence.room:compiler:${roomVersion}"

    // Firebase (future)
    implementation "com.google.firebase:firebase-database:${firebaseVersion}"

    // Dagger
    implementation "com.google.dagger:dagger:${daggerVersion}"
    implementation "com.google.dagger:dagger-android:${daggerVersion}"
    implementation "com.google.dagger:dagger-android-support:${daggerVersion}"
    kapt "com.google.dagger:dagger-android-processor:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"

    // Butterknife
    implementation "com.jakewharton:kotterknife:${butterknifeVersion}"

    // AutoFactory
    kapt "com.google.auto.factory:auto-factory:${autoFactoryVersion}"
    compileOnly "com.episode6.hackit.auto.factory:auto-factory-annotations:${autoFactoryVersion}"

    // Time Picker
    implementation "com.wdullaer:materialdatetimepicker:${timePickerVersion}"

    // Calligraphy
    implementation "uk.co.chrisjenx:calligraphy:${calligraphyVersion}"

    // Picasso
    implementation "com.squareup.picasso:picasso:${picassoVersion}"

    // Joda Time
    implementation "net.danlew:android.joda:${jodaTimeVersion}"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:${rxjavaVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}"

    // RxRelay
    implementation "com.jakewharton.rxrelay2:rxrelay:${rxRelayVersion}"

    // Stetho
    implementation "com.facebook.stetho:stetho:${stethoVersion}"

    // Crashlytics
    implementation("com.crashlytics.sdk.android:crashlytics:${crashlyticsVersion}") {
        transitive = true
    }

    // Test helpers for LiveData
    testImplementation "android.arch.core:core-testing:${lifecycleVersion}"

    // Test helpers for Room
    testImplementation "android.arch.persistence.room:testing:${roomVersion}"
    androidTestImplementation "android.arch.persistence.room:testing:${roomVersion}"

    // Mockito Kotlin
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.hamcrest:hamcrest-junit:${hamcrestJunitVersion}"
    testImplementation "com.nhaarman:mockito-kotlin-kt1.1:${mockitoKotlinVersion}"

    // Robolectric
    testImplementation "org.robolectric:robolectric:${robolectricVersion}"

    // Android test runner
    androidTestImplementation "com.android.support:support-annotations:${supportLibraryVersion}"
    androidTestImplementation "com.android.support.test:runner:${androidTestRunnerVersion}"
    androidTestImplementation "com.android.support.test:rules:${androidTestRunnerVersion}"
}
apply plugin: 'kotlin-android-extensions'